{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\romie\\\\Desktop\\\\supermarket\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./products.service\";\nexport class CartsService {\n  constructor(_http, productsService) {\n    var _this = this;\n\n    this._http = _http;\n    this.productsService = productsService;\n    this.items = [];\n    this.total = 0;\n\n    this.initCart = () => {\n      const observable = this._http.get('http://localhost:3001/api/carts');\n\n      try {\n        observable.subscribe(response => {\n          this.cartData = response.currentCart.cart;\n          this.items = response.currentCart.cartItems;\n          this.previousCartData = response.latestCart;\n          this.total = this.calculateTotal();\n        });\n      } catch (error) {\n        console.log(error.message);\n        alert(error.message);\n      }\n    };\n\n    this.clearCart = () => {\n      const observable = this._http.delete(`http://localhost:3001/api/items/${this.cartData._id}`);\n\n      try {\n        observable.subscribe(response => {\n          this.items = [];\n          this.total = this.calculateTotal();\n        });\n      } catch (error) {\n        console.log(error.message);\n        alert(error.message);\n      }\n    };\n\n    this.addItemToCart = payload => {\n      if (payload.quantity < 0) return;\n      payload.cartId = this.cartData._id;\n\n      const observable = this._http.post('http://localhost:3001/api/items', payload);\n\n      try {\n        observable.subscribe(response => {\n          this.items = response;\n          this.total = this.calculateTotal();\n        });\n      } catch (error) {\n        console.log(error.message);\n        alert(error.message);\n      }\n    };\n\n    this.closeCart = () => {\n      if (!this.items.length) throw new Error('Empty cart');\n      const payload = {\n        cartId: this.cartData._id\n      };\n\n      const observable = this._http.patch('http://localhost:3001/api/carts', payload);\n\n      try {\n        observable.subscribe(response => {\n          this.cartData = response.newCartData.cart;\n          this.items = [];\n          this.total = this.calculateTotal();\n        });\n      } catch (error) {\n        console.log(error.message);\n        alert(error.message);\n      }\n    };\n\n    this.downloadReceipt = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (cartId) {\n        const observable = _this._http.get(`http://localhost:3001/api/receipts/${cartId}`);\n\n        try {\n          observable.subscribe(response => {\n            console.log(response.json());\n          });\n        } catch (error) {\n          console.log(error.message);\n          alert(error.message);\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.calculateTotal = () => {\n      const total = this.items.reduce((sum, item) => {\n        let [product] = this.productsService.productsArray.filter(product => {\n          return product._id == item.productId ? product : null;\n        });\n        return sum += item.quantity * product.productPrice;\n      }, 0);\n      return total;\n    };\n  }\n\n}\n\nCartsService.ɵfac = function CartsService_Factory(t) {\n  return new (t || CartsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductsService));\n};\n\nCartsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartsService,\n  factory: CartsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/romie/Desktop/supermarket/client/src/app/services/carts.service.ts"],"names":["i0","i1","i2","CartsService","constructor","_http","productsService","items","total","initCart","observable","get","subscribe","response","cartData","currentCart","cart","cartItems","previousCartData","latestCart","calculateTotal","error","console","log","message","alert","clearCart","delete","_id","addItemToCart","payload","quantity","cartId","post","closeCart","length","Error","patch","newCartData","downloadReceipt","json","reduce","sum","item","product","productsArray","filter","productId","productPrice","ɵfac","CartsService_Factory","t","ɵɵinject","HttpClient","ProductsService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./products.service\";\r\nexport class CartsService {\r\n    constructor(_http, productsService) {\r\n        this._http = _http;\r\n        this.productsService = productsService;\r\n        this.items = [];\r\n        this.total = 0;\r\n        this.initCart = () => {\r\n            const observable = this._http.get('http://localhost:3001/api/carts');\r\n            try {\r\n                observable.subscribe((response) => {\r\n                    this.cartData = response.currentCart.cart;\r\n                    this.items = response.currentCart.cartItems;\r\n                    this.previousCartData = response.latestCart;\r\n                    this.total = this.calculateTotal();\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error.message);\r\n                alert(error.message);\r\n            }\r\n        };\r\n        this.clearCart = () => {\r\n            const observable = this._http.delete(`http://localhost:3001/api/items/${this.cartData._id}`);\r\n            try {\r\n                observable.subscribe((response) => {\r\n                    this.items = [];\r\n                    this.total = this.calculateTotal();\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error.message);\r\n                alert(error.message);\r\n            }\r\n        };\r\n        this.addItemToCart = (payload) => {\r\n            if (payload.quantity < 0)\r\n                return;\r\n            payload.cartId = this.cartData._id;\r\n            const observable = this._http.post('http://localhost:3001/api/items', payload);\r\n            try {\r\n                observable.subscribe((response) => {\r\n                    this.items = response;\r\n                    this.total = this.calculateTotal();\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error.message);\r\n                alert(error.message);\r\n            }\r\n        };\r\n        this.closeCart = () => {\r\n            if (!this.items.length)\r\n                throw new Error('Empty cart');\r\n            const payload = { cartId: this.cartData._id };\r\n            const observable = this._http.patch('http://localhost:3001/api/carts', payload);\r\n            try {\r\n                observable.subscribe((response) => {\r\n                    this.cartData = response.newCartData.cart;\r\n                    this.items = [];\r\n                    this.total = this.calculateTotal();\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error.message);\r\n                alert(error.message);\r\n            }\r\n        };\r\n        this.downloadReceipt = async (cartId) => {\r\n            const observable = this._http.get(`http://localhost:3001/api/receipts/${cartId}`);\r\n            try {\r\n                observable.subscribe((response) => {\r\n                    console.log(response.json());\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log(error.message);\r\n                alert(error.message);\r\n            }\r\n        };\r\n        this.calculateTotal = () => {\r\n            const total = this.items.reduce((sum, item) => {\r\n                let [product] = this.productsService.productsArray.filter((product) => {\r\n                    return (product._id == item.productId) ? product : null;\r\n                });\r\n                return sum += item.quantity * product.productPrice;\r\n            }, 0);\r\n            return total;\r\n        };\r\n    }\r\n}\r\nCartsService.ɵfac = function CartsService_Factory(t) { return new (t || CartsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProductsService)); };\r\nCartsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CartsService, factory: CartsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}